#summary JS API reference for Curl plugin
#labels Topic-JS-API,Phase-UserDocs

*See also:* [Plugins]

<wiki:toc max_depth='3'/>

= Curl Plugin =

*Achtung: this is new code (added 20091118) and the interface may still change significantly.*

This plugin provides a JS class called `Curl` which allows the client to
perform certain operations on URLs using the
[http://curl.haxx.se/libcurl/ libcurl API].

Currently only reading of URLs is supported.

== WARNINGS ==

*Do not try to use this API to load binary data.* It is not possible to pass
binary data to JS without the overhead of transporting the data from C++ to
JS as an Array of integers, which would have a _huge_ memory cost.

When a v8 string is created and it contains any "high bits" (anything non-ASCII),
v8 assumes (IIRC) UTF16 and acts accordingly, and this will fail miserably if the data
is not exactly the assumed format.

== Loading from JS ==

Install the plugin by following the instructions on the [Plugins] page. It requires
that `libcurl` be found in your linker path and that `<curl/curl.h>` is in your default
includes path (or edit the makefile to suit).

Then simply do:

{{{
loadPlugin('v8-juice-libcurl');
}}}

== Loading from C++ ==

The class can be added to a JS engine by linking in
[http://code.google.com/p/v8-juice/source/browse/extra-plugins/src/curl the relevant code]
into your app and calling `v8::juice::expat::CurlJS::SetupBindings()`.

= JS API =

|| *Return type* || *Name/Signature* || *Notes* ||
|| `Curl` || `new Curl([string url | object options])` || Creates a new parser object. ||
|| `int` || `addOpt(Object options)` || Like `setOpt(object)`, but does not clear the options list. ||
|| `void` || `destroy()` || Destroys the object, freeing all of its resources. Calling this is optional, but has the benefit of freeing up resources immediately, rather than waiting on the garbage collector. ||
|| `mixed` || `getInfo(int)` || ||
|| `int` || `easyPerform()` || Analog to `curl_easy_perform()`. ||
|| `int` || `setOpt(int CurlOptionID,mixed value)` || See below. Throws on error. ||
|| `int` || `setOpt(Object options)` || See below. Returns number of properties set or throws on error. ||

Each `Curl` object has a number of options which control how libcurl
handles data. These options are set using `setOpt()`. The following
table list the options (in alphabetical order) and their libcurl
counterparts (which are documented
[http://curl.haxx.se/libcurl/c/curl_easy_setopt.html at the libcurl site]).

|| *Property* || *Curl Counterpart* || *Notes* ||
|| `bool crlf` || `CURLOPT_CRLF` || ||
|| `int bufferSize` || `CURLOPT_BUFFERSIZE` || ||
|| `int connectionTimeout` || `CURLOPT_CONNECTIONTIMEOUT` || ||
|| `bool failOnError` || `CURLOPT_FAILONERROR` || ||
|| `bool followLocation` || `CURLOPT_FOLLOWLOCATION` || ||
|| `bool header` || `CURLOPT_HEADER` || ||
|| `any headerData` || `CURLOPT_HEADERDATA` || Passed as last argument to `headerFunction()` ||
|| `function headerFunction(data,readLength,userData)` || `CURLOPT_HEADERFUNCTION` || See below. ||
|| `StringArray httpHeader` || `CURLOPT_HTTPHEADER` || ||
|| `StringArray http200Aliases` || `CURLOPT_HTTP200ALIASES` || ||
|| `string interface` || `CURLOPT_INTERFACE` || ||
|| `int lowSpeedLimit` || `CURLOPT_LOW_SPEED_LIMIT` || ||
|| `int lowSpeedTime` || `CURLOPT_LOW_SPEED_TIME` || ||
|| `bool noBody` || `CURLOPT_NOBODY` || ||
|| `string noProxy` || `CURLOPT_NOPROXY` || ||
|| `int port` || `CURLOPT_PORT` || default port number to use. ||
|| `StringArray postQuote` || `CURLOPT_POSTQUOTE` || ||
|| `StringArray preQuote` || `CURLOPT_PREQUOTE` || ||
|| `string proxy` || `CURLOPT_PROXY` || ||
|| `int proxyPort` || `CURLOPT_PROXYPORT` || ||
|| `string range` || `CURLOPT_RANGE` || ||
|| `int resumeFrom` || `CURLOPT_RESUME_FROM` || ||
|| `int maxRedirs` || `CURLOPT_MAXREDIRS` || ||
|| `bool post` || `CURLOPT_POST` || ||
|| `StringArray quote` || `CURLOPT_QUOTE` || ||
|| `int timeout` || `CURLOPT_TIMEOUT` || ||
|| `int timeoutMS` || `CURLOPT_TIMEOUT_MS` || ||
|| `string url` || `CURLOPT_URL` || The URL to read from/write to. ||
|| `string userAgent` || `CURLOPT_USERAGENT` || ||
|| `string userName` || `CURLOPT_USERNAME` || ||
|| `string userPwd` || `CURLOPT_USERPWD` || ||
|| `bool verbose` || `CURLOPT_VERBOSE` || If true, libcurl sends debugging info to stderr.  ||
|| `any writeData` || `CURLOPT_WRITEDATA` || Passed as last argument to `writeFunction()` ||
|| `function writeFunction(data,readLength,userData)` || `CURLOPT_WRITEFUNCTION` || See below. ||

All of the supported `CURLOPT_xxx` constants are available in JS space via `Curl.OPT_xxx`.

== Setting Curl Options ==

The various option properties can be set like:

{{{
// Using libcurl notation:
mycurl.setOpt( Curl.OPT_VERBOSE, true );

// Using JS-style option names:
mycurl.setOpt( 'userName', 'stephan' );

// As an object containing key/value pairs:
mycurl.setOpt( { verbose:true, url:'http://code.google.com' } );
}}}

In the first form, the first argument must be `Curl.OPT_XXX`,
which corresponds to one of the `CURLOPT_XXX` constants listed above.
In the second form, it uses the "JS-like" propert name as the first
argument.

The changes are applied immediately, but not all have any effect if
changed after a connection is established (by calling `easyPerform()`).

To fetch the options values, use
`myCurlObj.opt.optionName`. *However*, if you _assign_ to that
variable directly then the settings will not be applied to the
underlying curl routines. _Never_ re-assign the `opt` property itself
- that will cause the internals to use a different options object! 
(Those last two behaviours are bugs, but v8's get/set interceptor
interface won't let me do this they way i would like to.)

Also beware that passing an object to `setOpt()` will replace the
internal list of options but will not "undo" any options previously
set on the object. e.g. if you call `myCurl.setOpt(Curl.OPT_URL,...)`
and then call `myCurl.setOpt({})`, the url property will be erased
from the `myCurl` object (because it is not in the new options) but
the underlying libcurl connection will still use it until another
value is set.

== Callback routines ==

The `headerFunction()` and `writeFunction()` properties are functions
which are called when a response header or body chunk have been
read. They take three arguments:

  * The data read in, as a string object.
  * The real length of the read-in data.
  * The `Curl` object's `opt.writeData` value (because this is how the native API does it).

Note that it is not safe to pass binary data into v8, so if you
fetched binary data then the `.length` property of the read-in data
will differ from the second paremeter's value. In such a case, there
are no guarantees that the data is valid - it might have been
corrupted via v8's string conversion routines.

When the `headerFunction()` is called, it is passed a single header line (a complete header entry), but that line has a trailing `\r\n` on it, which should be stripped by the caller. It is not stripped by the wrapper because doing so would cause confusion with the `length` parameter (and we do not adjust to account for the two extra stripped characters that because it would falsify any byte count calculations done by the client).

== `getInfo()` and `CURLINFO_xxx` mappings. ==

`getInfo()` works similarly to [http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html curl_easy_getinfo()].
It accepts a single integer parameter corresponding to one of the
`CURLINFO_xxx` arguments listed below. If `getInfo()` fails then it
throws an exception, otherwise it returns an different type depending
on the `CURLINFO` argument (string, int, double, or array-of-strings).
Unlike `setOpt()` and friends, the first argument must be an integer -
there are no "JS-friendly" names for these properties.

The following list shows which `CURLINFO_xxx` constants are available
via `Curl.INFO_xxx`. Most, but not all, of these can be fetched using
`getInfo()`. Those which cannot be fetched via `getInfo()` are marked
with an asterisk.


  * `CURLINFO_APPCONNECT_TIME`
  * `CURLINFO_CERTINFO`
  * `CURLINFO_CONDITION_UNMET`
  * `CURLINFO_CONNECT_TIME`
  * `CURLINFO_CONTENT_LENGTH_DOWNLOAD`
  * `CURLINFO_CONTENT_LENGTH_UPLOAD`
  * `CURLINFO_CONTENT_TYPE`
  * `CURLINFO_COOKIELIST`
  * `CURLINFO_DATA_IN` `*`
  * `CURLINFO_DATA_OUT` `*`
  * `CURLINFO_DOUBLE`
  * `CURLINFO_EFFECTIVE_URL`
  * `CURLINFO_END` `*`
  * `CURLINFO_FILETIME`
  * `CURLINFO_FTP_ENTRY_PATH`
  * `CURLINFO_HEADER_IN` `*`
  * `CURLINFO_HEADER_OUT` `*`
  * `CURLINFO_HEADER_SIZE`
  * `CURLINFO_HTTPAUTH_AVAIL`
  * `CURLINFO_HTTP_CONNECTCODE`
  * `CURLINFO_LASTONE` `*`
  * `CURLINFO_LASTSOCKET`
  * `CURLINFO_LONG`
  * `CURLINFO_MASK` `*`
  * `CURLINFO_NAMELOOKUP_TIME`
  * `CURLINFO_NONE`
  * `CURLINFO_NUM_CONNECTS`
  * `CURLINFO_OS_ERRNO`
  * `CURLINFO_PRETRANSFER_TIME`
  * `CURLINFO_PRIMARY_IP`
  * `CURLINFO_PRIVATE`
  * `CURLINFO_PROXYAUTH_AVAIL`
  * `CURLINFO_REDIRECT_COUNT`
  * `CURLINFO_REDIRECT_TIME`
  * `CURLINFO_REDIRECT_URL`
  * `CURLINFO_REQUEST_SIZE`
  * `CURLINFO_RESPONSE_CODE`
  * `CURLINFO_SIZE_DOWNLOAD`
  * `CURLINFO_SLIST`
  * `CURLINFO_SPEED_DOWNLOAD`
  * `CURLINFO_SPEED_UPLOAD`
  * `CURLINFO_SSL_DATA_IN` `*`
  * `CURLINFO_SSL_DATA_OUT` `*`
  * `CURLINFO_SSL_ENGINES`
  * `CURLINFO_SSL_VERIFYRESULT`
  * `CURLINFO_STARTTRANSFER_TIME`
  * `CURLINFO_STRING`
  * `CURLINFO_TEXT`
  * `CURLINFO_TOTAL_TIME`
  * `CURLINFO_TYPEMASK` `*`

= Example =

{{{
    var c = new Curl();
    c.setOpt({
        url:'http://code.google.com/p/v8-juice/wiki/PluginCurl',
        userAgent:"Google Chrome, kind of.",
        //verbose:true,
        //noBody:true,
        writeFunction:function writeFunction(data,len,ud)
        {
            print(arguments.callee.name+"()",data.length,"of",len,"bytes");
            ++ud.count;
            return data.length;
        },
        writeData:{count:0},
        //header:true,
        headerFunction:function headerFunction(data,len,ud)
        {
            print(arguments.callee.name+"()",data.length,"of",len,
                  "bytes:","["+data.substring(0,data.length-2)+"]");
            ++ud.count;
            return data.length;
        },
        headerData:{count:0},
        placeholder:undefined
    });
    var rc = c.easyPerform();
    print( "c.easyPerform() rc =",rc);
    print(c,'=',JSON.stringify(c,undefined,2));
    c.destroy();
}}}

That produces output similar to:

{{{
headerFunction() 17 of 17 bytes: [HTTP/1.1 200 OK]
headerFunction() 37 of 37 bytes: [Date: Wed, 18 Nov 2009 01:11:46 GMT]
headerFunction() 18 of 18 bytes: [Pragma: no-cache]
headerFunction() 40 of 40 bytes: [Expires: Fri, 01 Jan 1990 00:00:00 GMT]
headerFunction() 42 of 42 bytes: [Cache-Control: no-cache, must-revalidate]
headerFunction() 40 of 40 bytes: [Content-Type: text/html; charset=UTF-8]
headerFunction() 33 of 33 bytes: [X-Content-Type-Options: nosniff]
headerFunction() 152 of 152 bytes: [Set-Cookie: PREF=ID=4f2a9007345<...snip...>;]
headerFunction() 18 of 18 bytes: [Server: codesite]
headerFunction() 21 of 21 bytes: [X-XSS-Protection: 0]
headerFunction() 28 of 28 bytes: [Transfer-Encoding: chunked]
headerFunction() 2 of 2 bytes: []
writeFunction() 965 of 965 bytes
writeFunction() 2836 of 2836 bytes
writeFunction() 278 of 278 bytes
writeFunction() 1133 of 1133 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 110 of 110 bytes
writeFunction() 1413 of 1413 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1248 of 1248 bytes
writeFunction() 1413 of 1413 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1063 of 1063 bytes
c.easyPerform() rc = 0
[object Curl@0x8b763f0] = {
  "opt": {
    "url": "http://code.google.com/p/v8-juice/wiki/PluginCurl",
    "userAgent": "Google Chrome, kind of.",
    "writeData": {
      "count": 13
    },
    "headerData": {
      "count": 12
    }
  }
}
}}}

= TODOs =

  * The API currently doesn't support writing over curl.
  * Add `CURLOPT_READFUNCTION` and friends.
