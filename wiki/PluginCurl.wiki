#summary JS API reference for Curl plugin
#labels Topic-JS-API,Phase-UserDocs

*See also:* [Plugins]

<wiki:toc max_depth='3'/>

= Curl Plugin =

Added 20091118.

This plugin provides a JS class called !Curl which allows the client to
perform certain operations on URLs using the
[http://curl.haxx.se/libcurl/ libcurl API].

Currently only reading of URLs is supported.

== WARNINGS ==

*Do not try to use this API to load binary data.* It is not possible to pass
binary data to JS without the overhead of transporting the data from C++ to
JS as an Array of integers, which would have a _huge_ memory cost.

When a v8 string is created and it contains any "high bits" (anything non-ASCII),
v8 assumes (IIRC) UTF16 and acts accordingly, and this will fail miserably if the data
is not exactly the assumed format.

== Loading from JS ==

Install the plugin by following the instructions on the [Plugins] page. It requires
that `libcurl` be found in your linker path and that `<curl/curl.h>` is in your default
includes path (or edit the makefile to suit).

Then simply do:

{{{
loadPlugin('v8-juice-libcurl');
}}}

== Loading from C++ ==

The class can be added to a JS engine by linking in
[http://code.google.com/p/v8-juice/source/browse/extra-plugins/src/curl the relevant code]
into your app and calling `v8::juice::expat::CurlJS::SetupBindings()`.

= JS API =

|| *Return type* || *Name/Signature* || *Notes* ||
|| `Curl` || `new Curl([string url | object options])` || Creates a new parser object. ||
|| `int` || `easyPerform()` || Analog to `curl_easy_perform()`. ||
|| `void` || `destroy()` || Destroys the object, freeing all of its resources. Calling this is optional, but has the benefit of freeing up resources immediately, rather than waiting on the garbage collector. ||

Each `Curl` object has a member called `opt` which holds the curl-related options. The following
table list the `opt` options (in alphabetical order) and their libcurl counterparts (which are documented
[http://curl.haxx.se/libcurl/c/curl_easy_setopt.html at the libcurl site]):

|| *Property* || *Curl Counterpart* || *Notes* ||
|| `bool crlf` || `CURLOPT_CRLF` || ||
|| `int bufferSize` || `CURLOPT_BUFFERSIZE` || ||
|| `int connectionTimeout` || `CURLOPT_CONNECTIONTIMEOUT` || ||
|| `bool failOnError` || `CURLOPT_FAILONERROR` || ||
|| `bool followLocation` || `CURLOPT_FOLLOWLOCATION` || ||
|| `bool header` || `CURLOPT_HEADER` || ||
|| `any headerData` || `CURL_HEADERDATA` || Passed as last argument to `headerFunction()` ||
|| `function headerFunction(data,readLength,userData)` || `CURL_HEADERFUNCTION` || See below. ||
|| `string interface` || `CURLOPT_INTERFACE` || ||
|| `bool noBody` || `CURLOPT_NOBODY` || ||
|| `string noProxy` || `CURLOPT_NOPROXY` || ||
|| `int port` || `CURL_PORT` || default port number to use. ||
|| `string proxy` || `CURLOPT_PROXY` || ||
|| `int proxyPort` || `CURLOPT_PROXYPORT` || ||
|| `string range` || `CURLOPT_RANGE` || ||
|| `int maxRedirs` || `CURLOPT_MAXREDIRS` || ||
|| `int timeout` || `CURLOPT_TIMEOUT` || ||
|| `int timeoutMS` || `CURLOPT_TIMEOUT_MS` || ||
|| `string url` || `CURL_URL` || The URL to read from/write to. ||
|| `string userAgent` || `CURLOPT_USERAGENT` || ||
|| `string userName` || `CURLOPT_USERNAME` || ||
|| `string userPwd` || `CURLOPT_USERPWD` || ||
|| `bool verbose` || `CURLOPT_VERBOSE` || If true, libcurl sends debugging info to stderr.  ||
|| `any writeData` || `CURL_WRITEDATA` || Passed as last argument to `writeFunction()` ||
|| `function writeFunction(data,readLength,userData)` || `CURL_WRITEFUNCTION` || See below. ||

The various properties can either be set like:

{{{
mycurl.opt.verbose = true;
}}}

or:

{{{
mycurl.verbose = true;
}}}

but there is a subtle difference. When using the first approach, the
settings are only passed on to libcurl when `easyPerform()` is
called. Options set directly on the `Curl` object will be passed on to
libcurl immediately (but not all have any effect if changed after a
connection is established!). The reason for this difference is our
inability to hook in to the accessors of the `opt` object (it can be
done, but would require a significant amount of effort, requiring a custom
bound native class for the opt object).

Curl options properties set directly on a `Curl` object are
non-enumerable.  That means they will not show up when doing,
e.g. (`for(var k in myCurlObj)`). This is by design.

== Callback routines ==

The `headerFunction()` and `writeFunction()` properties are functions
which are called when a response header or body chunk have been
read. They take three arguments:

  * The data read in, as a string object.
  * The real length of the read-in data.
  * The `Curl` object's `opt.writeData` value (because this is how the native API does it).

Note that it is not safe to pass binary data into v8, so if you
fetched binary data then the `.length` property of the read-in data
will differ from the second paremeter's value. In such a case, there
are no guarantees that the data is valid - it might have been
corrupted via v8's string conversion routines.

When the `headerFunction()` is called, it is passed a single header line (a complete header entry), but that line has a trailing `\r\n` on it, which should be stripped by the caller. It is not stripped by the wrapper because doing so would cause confusion with the `length` parameter (and we do not adjust to account for the two extra stripped characters that because it would falsify any byte count calculations done by the client).

= Example =

{{{
    var c = new Curl();
    c.opt = {
        url:'http://code.google.com/p/v8-juice/wiki/PluginCurl',
        userAgent:"Google Chrome, kind of.",
        //verbose:true,
        //noBody:true,
        writeFunction:function writeFunction(data,len,ud)
        {
            print(arguments.callee.name+"()",data.length,"of",len,"bytes");
            ++ud.count;
            return data.length;
        },
        writeData:{count:0},
        //header:true,
        headerFunction:function headerFunction(data,len,ud)
        {
            print(arguments.callee.name+"()",data.length,"of",len,
                  "bytes:","["+data.substring(0,data.length-2)+"]");
            ++ud.count;
            return data.length;
        },
        headerData:{count:0},
        placeholder:undefined
    };
    var rc = c.easyPerform();
    print( "c.easyPerform() rc =",rc);
    print(c,'=',JSON.stringify(c,undefined,2));
    var c2 =
        //new Curl();
        //new Curl({ url:"http://yahoo.com" })
        new Curl("http://yahoo.com")
        ;
    print( c2,'=', JSON.stringify(c2) );
    c2.destroy();
    c.destroy();
}}}

That produces output similar to:

{{{
headerFunction() 17 of 17 bytes: [HTTP/1.1 200 OK]
headerFunction() 37 of 37 bytes: [Date: Wed, 18 Nov 2009 01:11:46 GMT]
headerFunction() 18 of 18 bytes: [Pragma: no-cache]
headerFunction() 40 of 40 bytes: [Expires: Fri, 01 Jan 1990 00:00:00 GMT]
headerFunction() 42 of 42 bytes: [Cache-Control: no-cache, must-revalidate]
headerFunction() 40 of 40 bytes: [Content-Type: text/html; charset=UTF-8]
headerFunction() 33 of 33 bytes: [X-Content-Type-Options: nosniff]
headerFunction() 152 of 152 bytes: [Set-Cookie: PREF=ID=4f2a9007345<...snip...>;]
headerFunction() 18 of 18 bytes: [Server: codesite]
headerFunction() 21 of 21 bytes: [X-XSS-Protection: 0]
headerFunction() 28 of 28 bytes: [Transfer-Encoding: chunked]
headerFunction() 2 of 2 bytes: []
writeFunction() 965 of 965 bytes
writeFunction() 2836 of 2836 bytes
writeFunction() 278 of 278 bytes
writeFunction() 1133 of 1133 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 110 of 110 bytes
writeFunction() 1413 of 1413 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1248 of 1248 bytes
writeFunction() 1413 of 1413 bytes
writeFunction() 1418 of 1418 bytes
writeFunction() 1063 of 1063 bytes
c.easyPerform() rc = 0
[object Curl@0x8b763f0] = {
  "opt": {
    "url": "http://code.google.com/p/v8-juice/wiki/PluginCurl",
    "userAgent": "Google Chrome, kind of.",
    "writeData": {
      "count": 13
    },
    "headerData": {
      "count": 12
    }
  }
}
[object Curl@0x9af51b0] = {"opt":{"url":"http://yahoo.com"}}
}}}

= TODOs =

  * The API currently doesn't support writing over curl.
  * Certain curl properties (e.g.. `CURL_HTTPAUTH` and those of type `curl_slist`) require extra infrastructure before they can be implemented.
  * Add support for `curl_slist`-style options.