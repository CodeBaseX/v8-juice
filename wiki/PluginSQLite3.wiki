#summary JS Bindings for SQLite3
#labels Phase-UserDocs,Topic-Plugins

<wiki:toc max_depth="3"/>

=The sqlite3 bindings=

The sqlite3 bindings wrap about 60 sqlite3 functions for use in JavaScript, providing access to database files from script code.

All of the most significant features of sqlite3 are supported except:

  *  Custom collation sequences (no plans to implement these)
  *  Custom authorization functions (also no plans)
  *  The BLOB-related functions are missing. There would seem to be relatively few safe (in terms of type conversion) ways to use this from JS.
  *  The UTF16 functions are missing, as v8 does not directly support UTF16 (only in a roundabout manner).

Everything else one would "normally" need from script code is scriptable, including custom SQL functions via `sqlite3_create_function()`. The API provides native-side access to the DB handles created from script code, so clients can extend their script-side DBs using functionality not provided by these bindings.

These bindings are a direct port of the "original" bindings, which where implemented for SpiderMonkey and are described here:
http://spiderape.sourceforge.net/plugins/sqlite/

=Example=

Here's a rather contrived example which i use when testing out the bindings:

{{{
load_plugin('v8-juice-sqlite3');
var my = {db:0,stmt:0};
my.db = sqlite3_open("my.db");
print("Using sqlite3 version",sqlite3_libversion());

my.stmt = sqlite3_prepare( my.db, "create table if not exists t(a,b,c)");
print('typeof stmt ==',typeof my.stmt,', errmsg =',sqlite3_errmsg(my.db));
var rc = sqlite3_step( my.stmt );
print("step() rc ==",rc);
rc = sqlite3_finalize( my.stmt );
my.stmt = 0;
print("finalize() rc ==",rc);


if(1)
{
    my.stmt = sqlite3_prepare( my.db, "insert into t(a,b,c) values (?,?,?)" );
    var now = (new Date()).toString();
    for( var i = 0; i < 5; ++i )
    {
	sqlite3_bind( my.stmt, 1, 42 + i );
	sqlite3_bind( my.stmt, 2, 24.42 * i );
	//sqlite3_bind_text( my.stmt, 3, now+": #"+i, 10 );
	sqlite3_bind_text( my.stmt, 3, now+": #"+i );
	sqlite3_step( my.stmt );
	sqlite3_clear_bindings( my.stmt );
	sqlite3_reset( my.stmt );
    }
    sqlite3_finalize( my.stmt );
}

print("Entry count:",sqlite3_select_text(my.db,"select count(*) from t"));


if(1)
{
    function my_exec_cb(cbdata,rows,cols)
    {
	if( 1 == ++cbdata.pos )
	{
	    print("my_exec_cb()! cbdata =["+cbdata+"]",'rows =',typeof rows, rows.length,', cols =',typeof cols,cols.length);
	    print( cols.join('\t'));
	}
	print( rows.join('\t'));
	if( 0 && (cbdata.pos > 3) )
	{
	    throw new Error("Throwing from my_exec_cb()!");
	}
	return SQLITE_OK;
    }
    //rc = sqlite3_exec(my.db,"select myfunc('hi','world')",my_exec_cb);
    rc = sqlite3_exec(my.db,"select rowid,* from t order by rowid desc limit 7",my_exec_cb,{pos:0});
    print("exec() rc=",rc);
}

if( 1 )
{
    print("sqlite3_create_function() test...");
    function my_cb( sqcx, data, values )
    {
	print( "my_cb()!!! argc =",arguments.length, ", values.length =",values.length);//,"(",values.join(','),")" );
	for( var i = 0; i < values.length; ++i )
	{
	    print( "sqlite3_value_text(value #"+i+") =",sqlite3_value_text(values[i]));
	}
	sqlite3_result_value( sqcx, values[0] );
	return SQLITE_OK;
    }

    rc = sqlite3_create_function( my.db, "myfunc", -1, SQLITE_UTF8, {msg:"hi, callback"}, my_cb );
    print("create_function() rc=",rc);
    rc = sqlite3_select_int(my.db,"select myfunc(7,11,13)");
    print("myfunc() rc=",rc,', errmsg=',sqlite3_errmsg(my.db));
}

if(0)
{
    var str = "i'm stephan, who're you?";
    print("str:", str );
    sqlite3_sleep( 1000 );
    print("esc'd:", sqlite3_escape_sql( str ) );
    sqlite3_sleep( 1000 );
    print("quoted:", sqlite3_quote_sql( str ) );
    sqlite3_sleep( 1000 );
}

if(1)
{
    print("js_eval() test...");
    sqlite3_exec( my.db, "select js_eval('sqlite3_select_int(my.db,''select count(*) from t'')')");
    print( 'js_eval():',
	   sqlite3_select_text( my.db,
				"select js_eval('print(''hello, world'');''hi there'';')"
				)
	   );
    print( 'js_eval():',
	   sqlite3_select_text( my.db,
				"select js_eval('throw new Error(''testing throwing from js_eval!'')')"
				)
	   );
    print( 'js_eval():',
	   sqlite3_select_text( my.db,
				"select js_eval()"
				)
	   );
    print("js_eval() tests done.");
}

if(1)
{
    var ar = sqlite3_select_array( my.db, "select * from t order by rowid desc limit 7" );
    print('select array:',ar);
    var sep = '\t';
    if( ar instanceof Object )
    {
	for( var r = 0; r < ar.rows.length; ++r )
	{
	    if( 0 == r )
	    {
		print(ar.cols.join(sep));
	    }
	    print( ar.rows[r].join(sep) );
	}
	//print('select cols:',ar.cols);
	//print('select rows:',ar.rows);
    }
}

print("Shuting down...");
sqlite3_close( my.db );
print("Done!");
}}}

And that outputs:

{{{
stephan@jareth:~/cvs/v8-juice/extra-plugins/src/sqlite3$ v8-juice-shell test.js 
Using sqlite3 version 3.6.2
typeof stmt == object , errmsg = not an error
step() rc == 101
finalize() rc == 0
Entry count: 90
my_exec_cb()! cbdata =[[object Object]] rows = object 4 , cols = object 4
rowid	a	b	c
90	46	97.68	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #4
89	45	73.26	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #3
88	44	48.84	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #2
87	43	24.42	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #1
86	42	0	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #0
85	46	97.68	Sat Mar 14 2009 18:38:50 GMT+0100 (CET): #4
84	45	73.26	Sat Mar 14 2009 18:38:50 GMT+0100 (CET): #3
exec() rc= 0
sqlite3_create_function() test...
create_function() rc= 0
my_cb()!!! argc = 3 , values.length = 3
sqlite3_value_text(value #0) = 7
sqlite3_value_text(value #1) = 11
sqlite3_value_text(value #2) = 13
myfunc() rc= 7 , errmsg= not an error
js_eval() test...
hello, world
js_eval(): hi there
js_eval(): Error: testing throwing from js_eval!
js_eval(): 
js_eval() tests done.
select array: [object Object]
a	b	c
46	97.68	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #4
45	73.26	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #3
44	48.84	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #2
43	24.42	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #1
42	0	Sat Mar 14 2009 18:44:40 GMT+0100 (CET): #0
46	97.68	Sat Mar 14 2009 18:38:50 GMT+0100 (CET): #4
45	73.26	Sat Mar 14 2009 18:38:50 GMT+0100 (CET): #3
Shuting down...
Done!
}}}