#summary Informal summary of differences between versions.
#labels Featured,Phase-UserDocs,Topic-Project

=v8-juice ChangeLog=

This is the informal ChangeLog and "news list" for the v8-juice project. Newest items
are at the top. Dates written extra large are release dates. This contains only a high-level list of changes. The exact list of changes can be fished out of our source code repository at:

  * http://code.google.com/p/v8-juice/source/browse
  * http://code.google.com/p/v8-juice/source/list

----

*2011 Jan 22*
  * Inspired by the grace of vu8's API, i've started work on a spin-off of v8-juice called v8-convert. It currently contains only the [ConvertingTypes core type conversion] and a function-binding API similar to [BindingFunctions the current function-binding code], but using function-ptr-style template args to make it more human-readable. Unlike v8-juice, it is a header-only implementation, with the intention that it be easy to drop in to arbitrary v8 clients. i will add a basic class-binding mechanism, but nothing so heavyweight/complex as that provided by v8-juice. The initial code is working well, and once i've added a few missing features and documented it, i will release it as a standalone sub-project of v8-juice.

*2011 Jan 6*
  * Added `v8::juice::GetV8StackTrace()`, which implements the `v8::InvocationCallback` interface and allows us to fetch stacktraces from our JS code. It is available in the `v8-juice-shell` (or via the `JuiceShell` class) with the JS name `getStackTrace()`.

*2010 Dec 29*
  * Joel Reymont has made v8-juice available [https://github.com/wagerlabs/v8-juice via github].

==2010 November 26==
  * Happy birthday to my brother Gerald!
  * Fixed another int64/(long long) ambiguity in the `v8::juice::convert` API for some 64-bit platforms, which fixes a link-time error in the sqlite3 plugin.
  * Finally made a new release (it's been a year already, if you can believe that).

*2010 June 6*
  * Fixed an int64/(long long) ambiguity for some 64-bit platforms. The sqlite3 plugin now builds on those platforms.

*2010 April 8*
  * Integrated a fix for issue #19. Thanks go to Feng Fillano for localizing and reporting the problem.

*2010 April 7*
  * Added `spawnTimeoutThread()` and friends, which are multi-threaded variants of the standard `setTimeout()` (and friends) functions). The current `setTimeout()` (and friends) impls are not strictly standards-conformant, and will eventually be replaced by something that is. Until then, `setTimeout()` is simply an alias for `spawnTimeoutThread()`.

*2010 March 30*
  * A templates-related compilation fix for an error which should have been triggered long ago but never was for some reason.

*2010 March 18*
  * Moved one of the class binding demos into its own plugin: [PluginPosixFILE]

*2009 Nov 21*
  * Got function binding working for functions taking (`char const *`) arguments, with a few fairly minor limitations.

*2009 Nov 18*
  * Added [PluginCurl libcurl plugin].

==2009 Nov 15==
  * It's about time for a new release.

*2009 Nov 14*
  * Added an [PluginExpatParser XML parser plugin].

*2009 Nov 9*
  * `JSToNative<std::string>` now treats strings as UTF8 instead of ASCII. (Thanks go to Rob Tsuk.)
  * `NativeToJS<uint32_t>` now behaves properly. (Thanks go to Steven Grafton.)

*2009 Oct 28*
  * Re-implemented the [PathFinderClass PathFinder class] using the [ClassWrap ClassWrap API]. The amount of code is about the same, but it's now trivial to swap out some of the back-end parts to make trade-offs for speed and memory consumption vs. type-safety and conversion features.

*2009 Oct 25*
  * Added `CtorForwarder` class, which can pass on `v8::Arguments` objects to native constructors.
  * The new class binder ([ClassWrap]) can now bind a JS ctor to multiple overloaded native ctors.
  * Added bits which allow us to bind (independent of the class binder) JS functions to multiple native overloads, such that the function which gets called depends on the argument count. e.g. `foo.overloaded()` and `foo.overloaded(1,2,3)` may be bound to different native functions (or member functions).
  * Fixed a post-`main()` crash in `v8-juice-shell` when using the latest versions of v8 (where they changed some locking-related assertions).

*2009 Oct 22-24*
  * Significant work done on the new function binding approach (see [BindingFunctions]).
  * Introduced the `v8::juice::convert::TypeTraits<>` class to help pass around proper type information related to JS/Native conversions.

*2009 Oct 21*
  * (edge branch) We have a much more flexible/generic native-to-JS function binding mechanism which can be used to bind near-arbitrary functions to arbitrary JS objects with a single line of code (with compile-time type safety). If `JSToNative()` and `NativeToJS()` are implemented for a JS-bound native, then native member functions may also be bound to their JS counterpart. This can be used in conjunction with [ClassBinder] and friends or with arbitrary JS objects.

*2009 Oct 17*
  * Started factoring out the functionality of `v8-juice-shell` into the `JuiceShell` class, to make it more reusable.
  * Added an optional (and experimental) optimization for `WeakJSClassCreator`, to speed up conversion to/from JS/Native when cross-JS/Native inheritance is not required.
  * `v8-juice-shell` now gives the global object a name (`v8juice`). The bound function `load_plugin()` has been renamed to `loadPlugin()`, for naming consistency.

*2009 Oct 15*
  * Created a new branch called [http://code.google.com/p/v8-juice/source/browse/#svn/branches/edge edge] for trying out some up-coming changes/additions.
  * Added to ClassBinder: ability to bind JS member propertes to native accessor/mutator functions. See [PathFinderClass] for an example which uses this.

*2009 Sept 13*
  * v8-juice-shell now passes all arguments after "--" to the executed script(s), where arguments[0]==argv[0] and arguments[1..N] are the arguments passed after "--".

*2009 Sept 12*
  * Added `setTimeout()`, `clearTimeout()`,  `setInterval()`, `clearInterval()` and several variants of `sleep()` (which relinquishes control to other threads while it sleeps). The timeout/interval functions work similarly to their browser-side cousins. See [BindableFunctions].
  * Other minor touchups i've been collecting over the summer.

*2009 May 27*

  * Patch from robtsuk: `v8::juice::IncludeScript()` (JS `include()`) now returns a live reference instead of a dead one, fixing a crash when the return value of `include()` was dereferenced.

==2009 April 4==
  * New release.

*2009 March 31*
  * Added toggles to [CreatingJSClasses WeakJSClassCreator] to allow constructors to be called without `new` and to activate searches for the native `this` object via JS-side prototypes (necessary if JS types are to subclass native types).
  * Minor additions to the [PluginNCurses ncurses plugin].

*2009 March 28/29*
  * Moved the remaining plugins from the core tree to the [http://code.google.com/p/v8-juice/source/browse/extra-plugins/src extra-plugins source repo].
  * The [ConvertingTypes convert.h code] is now independent of the rest of the library.
  * The [CreatingJSClasses WeakJSClassCreator cast operators] can now cast from JS to `(T&)` and `(T const &)`. This means functions taking reference types can now be bound.  The conversions must throw a std::exception if the conversion fails, to avoid dereferencing null. The function forwarding framework will catch such exceptions and return the result as a JS exception, rather than letting the native exception propagate through v8 (which can lead to a corrupt stack).
  * Added the `--print-cerr` command line option `v8-juice-shell`. This forces the JS `print()` function to use `std::cerr` for output instead of `std::cout`, which is often helpful when debugging [PluginNCurses curses applications] (we can then redirect `print()` to another console without hosing the curses screen state).


==2009 March 25==
  * New release.

*2009 March 24*
  * Found a way to support dual native- and JS-side inheritance via [CreatingJSClasses WeakJSClassCreator], and refactored [PluginNCurses the ncurses plugin] to use it.
  * The past few days have mostly been spent reimplementing [PluginNCurses the ncurses plugin], which is once again in a usable state (but has a much different API than before).

*2009 March 21*
  * Started adding `ToSource()` to convert native types to JS source code. Has some notable limitations but basically works.
  * Added gzip/gunzip support for [PluginWhio input streams].
  * Added [PluginWhefs embedded filesystem plugin].

==2009 March 18==
  * Released new tarball

*2009 March 17*
  * More work on the sqlite3 plugin. Reimplemented sqlite3_exec() using the newer OO API.

*2009 March 16*
  * Added support for binding JS/C++ member variables (as opposed to functions). Supports all types which work with `CastToJS()` and `CastFromJS()`.

*2009 March 15*
  * Started reimplementing the [PluginSQLite3 sqlite3 plugin] to use class binding, rather an v8::External, for most argument handling.

*2009 March 13/14*
  * Refactored member function binding code significantly.
  * Many minor cleanups.
  * Completely wrapped [PathFinderClass the PathFinder class] in JS using only `ClassBinder`.


*2009 March 12* (after the release, i think)
  * Got binding to non-const member functions, and those returning void, working.

==*2009 March 12*==
  * Released new version.

*2009 March 9/10*
  * Added initial JS class creation helpers. See [CreatingJSClasses] wiki page for info.
  * General improvements to the [PluginWhio i/o plugin].

*2009 March 8*
  * Added [http://code.google.com/p/v8-juice/source/browse/#svn/extra-plugins extra-plugins] directory to svn, for plugins with hard dependencies on external/3rd-party software. Moved sqlite3/ncurses plugins into that tree.
  * Added new plugin: [PluginReadline readline]
  * Several little improvements/additions to the [PluginWhio I/O classes].

==2009 March 7==

  * Released the first tarball.

*2009 March 6*

Started porting in the original source tree to Google Code.