#summary Optional JS-bindable functions
#labels Topic-CPlusPlus,Topic-JS-API,Phase-UserDocs
<wiki:toc max_depth=4/>

= Optional JS Functions =

The native API has several utility functions for use in JS space. They
can be added to a client instance of v8 by binding them using normal
v8 conventions, e.g.:

{{{
myGlobal->Set(v8::String::New("sleep"), v8::FunctionTemplate::New(v8::juice::sleep));
}}}

The supported "extra" functions are listed below, grouped by the header file they are declared in. They are documented in their header files.

==juice.h==

[http://code.google.com/p/v8-juice/source/browse/trunk/src/include/v8/juice/juice.h juice.h]
[http://code.google.com/p/v8-juice/source/browse/trunk/src/lib/juice/juice.cc juice.cc]

|| *Native Function* (of type `v8::InvocationCallback`) || *JS Signature* || *Description* ||
|| `v8::juice::IncludeScript` || `include(filename)` || Includes external JS files. See [PathFinderClass]. ||

==!PathFinder.h==

See [PathFinderClass].

==plugin.h==
[http://code.google.com/p/v8-juice/source/browse/trunk/src/include/v8/juice/plugin.h plugin.h]
[http://code.google.com/p/v8-juice/source/browse/trunk/src/lib/juice/plugin.cc plugin.cc]

|| *Native Function* (of type `v8::InvocationCallback`) || *JS Signature* || *Description* ||
|| `v8::juice::plugin::LoadPlugin` || `loadPlugin(pluginName)` || Loads an external plugin from a DLL. See [Plugins]. ||


==sprintf.h==
[http://code.google.com/p/v8-juice/source/browse/trunk/src/include/v8/juice/sprintf.h sprintf.h]
[http://code.google.com/p/v8-juice/source/browse/trunk/src/lib/juice/sprintf.cc sprintf.cc]

|| *Native Function* (of type `v8::InvocationCallback`) || *JS Signature* || *Description* ||
|| `v8::juice::sprintf` || `sprintf(fmt,args...)` || Similar to conventional `sprintf()` implementations, plus some extensions. ||

==time.h==

[http://code.google.com/p/v8-juice/source/browse/trunk/src/include/v8/juice/time.h time.h]
[http://code.google.com/p/v8-juice/source/browse/trunk/src/lib/juice/time.cc time.cc]

Added to the API on 20090912.

|| *Native Function* (of type `v8::InvocationCallback`) || *JS Signature* || *Description* ||
|| `v8::juice::setTimeout` || `setTimeout(Function | string, milliseconds)` || Like the browser-standard function, but currently requires a function (not a string) as the first argument. ||
|| `v8::juice::clearTimeout` || `clearTimeout(timerID)` || Removes a scheduled `setTimeout()` callback. ||
|| `v8::juice::setInterval` || `setInterval(Function | string, milliseconds)` || Like `setTimeout()`, but runs the given callback at the given interval. ||
|| `v8::juice::clearInterval` || `clearInterval(timerID)` || Removes a scheduled `setInterval()` callback. ||
|| `v8::juice::sleep` || `sleep(seconds)` || Sleeps for a given number of seconds, unlocking the v8 VM for use by other threads during that time. ||
|| `v8::juice::mssleep` || `mssleep(milliseconds)` || Sleeps for a given number of milliseconds, unlocking the v8 VM for use by other threads during that time. ||
|| `v8::juice::usleep` || `usleep(microseconds)` || Sleeps for a given number of microseconds, unlocking the v8 VM for use by other threads during that time. ||

Due to internal details, `clearTimeout()` and `clearInterval()` are interchangeable, and either can be used
to clear IDs returned from `setTimeout()` or `setInterval()`. Passing 0 to any of the `sleep` variants will briefly unlock the v8 engine for other threads, and this can be used to implement a `yield` operation.

For the timeout functions to work, a `v8::Locker` instance must have been instantiated before the JS code which uses them starts executing. Don't as me why. If you're using `v8-juice-shell` then this is done for you, but if you're writing your own app, you'll need to add that.