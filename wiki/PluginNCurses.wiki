#summary JS bindings for ncurses
#labels Phase-UserDocs,Topic-Plugins

*ACHTUNG:* this plugin was broken as a side effect of recent v8-juice API changes, and is being completely rewritten.

<wiki:toc max_depth='3'/>

=About=

The ncurses bindings wrap up a great deal of the ncurses API for use in JavaScript. Instead
of providing an API directly compatible with the low-level C API (as earlier versions)
of this plugin did), it provides an object-oriented interface. This is much easier to
manage, in terms of window ownership, subwindows, etc., than the low-level interface. Nonetheless,
it is still curses at heart, and "cant ake some getting used to."


The advantages of writing curses apps in JS instead of C include:

  *  MUCH faster development of curses UIs, as the whole compile/link cycle goes away.
  *  The event model of curses (keypress) ties in very well with JavaScript, where it is trivial to bind the keypresses to event handlers.

TODOs:
  *  lots more testing, in particular with the PANEL/PAD APIs.
  *  Utility routines/classes, e.g. dialog boxes, basic user input routines, scrollable areas, etc.

ncurses features i have no plans for implementing:
  *  The FORMS and MENU sub-libraries will not be implemented.
  *  Terminal resize handling. That's a can of worms i don't want to open.
  *  The wide-char ncurses API. Maybe someday, but not soon.

==History==

This plugin is derived from an old ncurses C++ wrapper which i forked out of the ncurses 5.4
source tree in March of 2005. At one point is was also the basis for !JavaScript/ncurses binding
for !SpiderMonkey.

The first version of this plugin modelled the C-style API. It got broken in some major refactoring
of v8-juice, and rather than fix it i decided an OO wrapper would be more useful, and revived
the ancient code.


=API Overview=

This plugin installs the following items:

  * The `ncurses` object holds all classes, "global" functions, and symbolic constants.
  * The `NCWindow` approximates an ncurses `WINDOW` handle.
  * The `NCPanel` approximates an ncurses `PANEL` handle.
  * The `NCPad` somewhat approximates an ncurses `PAD` handle.

==Error Reporting==

Most error codes used by curses are integers with the value `ERR` for failure,
and non-ERR on success (honestly, that's what the curses standard specifies).
In practice, non-ERR is simply `OK`, which is 0.

Many errors are reported via exceptions, either because they come from the
JS side of the bindings (as opposed to being an ncurses error value) or because
they inherit that behaviour from the underlying C++ wrapper (which throws for
a number of error cases).

=The `ncurses` Object=

This plugin installs an object called `ncurses` which holds all of the classes and
a few non-class functions:

|| *Return type* || *Name/Arguments* || *Notes* ||
|| `int` || `color_pair(string fg, string bg)` || Takes foreground/background color names (can insensitive) and return the equivalent curses color attributes. Color names are: black, red, green, yellow, blue, magenta, cyan, white. They can normally be OR'd together with `ncurses.A_BOLD` to get a brighter foreground color. ||
|| `int` || `color_pairnum(string fg, string bg)` || Like `color_pair()`, but returns a curses _color pair_ number, which is only very rarely useful or needed. ||
|| `int` || `KEY_F(int)` || Equivalent to the `KEY_F()` native macro. ||
|| `int` || `intVal( string )` || Returns the ascii integer value of the first character in the given string ||
|| `int` || `charVal(int)` || If the given int is in the inclusive range of 0-127, it returns the ASCII character (as a string), otherwise it returns undefined. ||
|| `int` || `screenHeight()` || Height of the terminal, in text rows. Not valid until in curses mode. ||
|| `int` || `screenWidth()` || Width of the terminal, in text columns. Not valid until in curses mode. ||
|| `int` || `beep()` || Beeps one time. ||
|| `int` || `flash()` || Flashes the terminal. ||
|| `int` || `getch()` || Similar, but not identical, to `NCWindow.getch()`. In theory they are indentical, but in practice the latter has no refresh side-effects, whereas the former sometimes does. ||
|| `int` || `curs_set(int)` || Sets the cursor to invisible, half-visible, or fully visible, depending on whether the argument is 0, 1, or 2, respectively ||
|| `int` || `napms(int )` || Sleeps for the given number of milliseconds. ||
|| `int` || `endwin()` || Never call unless absolutely necessary - forcibly exits curses screen mode without cleaning up resources. ||

=NCWindow Class=

NCWindow is the base class of most other classes in this package. It is a wrapper around
an ncurses `WINDOW` handle, and provides most functions necessary for working with curses
windows.

==Member Function List==

Of this functions are not documented here. They mostly map 1-to-1 with
ncurses functions of the same (or very similar) names, and are
described in great detail in the ncurses man pages. That also explains
why their names are so cryptic and do not follow common JavaScript
naming conventions. The exceptions to the documentation rule are
functions which are unique to this API or, for reasons of argument
passing conventions, function differently than in the C API.

Some functions which are overloaded in the native C++ API instead
have several variants with slightly different names (all conforming
to common curses naming conventions). e.g. `getch()` vs `mvgetch()`.

Here we go...

|| *Return type* || *Name/Arguments* || *Notes* ||
|| `NCWindow` || `new NCWindow()` || A proxy for the ncurses `stdscr` object. ||
|| `NCWindow` || `new NCWindow(NCWindow [, bool box=true])` || Creates a subwindow of the given window, completely wrapping it with a 1-line/col border. If box is true, the border is decorated. Throws on error. ||
|| `NCWindow` || `new NCWindow(int lines, int cols, int y, int x)` || Creates a new wind with the given size/position. Throws on error. ||
|| `NCWindow` || `new NCWindow(NCWindow parent, int lines, int cols, int y, int x)` || Creates a subwindow of the given window, with coordinates relative to that window. ||
|| `void` || `close()` || Closes/destroys this windows. The object cannot be used after this is called. || 
|| `string` ||  `name()` || ||
|| `void` || `setName(string)` || ||
|| `int` ||  `lines()` || ||
|| `int` ||  `cols()` || ||
|| `int` ||  `tabsize()` || ||
|| `int` ||  `height()` || ||
|| `int` ||  `width()` || ||
|| `int` ||  `begy()` || ||
|| `int` ||  `begx()` || ||
|| `int` ||  `maxx()` || ||
|| `int` ||  `maxy()` || ||
|| `int` ||  `inch()` || ||
|| `int` ||  `insertln()` || ||
|| `int` ||  `getbkgd()` || ||
|| `int` ||  `erase()` || ||
|| `int` ||  `clear()` || ||
|| `int` ||  `clrtobot()` || ||
|| `int` ||  `delch()` || ||
|| `int` ||  `deleteln()` || ||
|| `int` ||  `touchwin()` || ||
|| `int` ||  `untouchwin()` || ||
|| `bool` ||  `is_wintouched()` || ||
|| `int` ||  `redrawwin()` || ||
|| `int` ||  `doupdate()` || ||
|| `void` ||  `syncdown()` || ||
|| `void` ||  `syncup()` || ||
|| `void` ||  `cursyncup()` || ||
|| `int` ||  `standout()` || ||
|| `int` ||  `standend()` || ||
|| `int` ||  `refresh()` || ||
|| `int` ||  `noutrefresh()` || ||
|| `bool` ||  `has_mouse()` || ||
|| `int` || `insch(int)` || ||
|| `int` || `insdelln(int)` || ||
|| `int` || `insstr(string)` || ||
|| `int` || `attron(int)` || ||
|| `int` || `attroff(int)` || ||
|| `int` || `attrset(int)` || ||
|| `int` || `color_set(int)` || Don't use this. Use `ncurses.color_pair()` instead - much easier. ||
|| `int` || `bkgd(int)` || ||
|| `int` || `clearok(bool)` || ||
|| `int` || `scroll(int)` || ||
|| `int` || `scrollok(bool)` || ||
|| `int` || `idlok(bool)` || ||
|| `void` || `idcok(bool)` || ||
|| `int` || `leaveok(bool)` || ||
|| `void` || `immedok(bool)` || ||
|| `int` || `keypad(bool)` || ||
|| `int` || `addch(int)` || ||
|| `int` || `echochar(int)` || ||
|| `int` || `addstr(string)` || ||
|| `bool` || `is_linetouched(int)` || ||
|| `int` || `mvwin( int, int )` || Moves the window. Do not do this if the window has a parent, or Grief may ensue. ||
|| `int` || `move( int, int )` || Moves the cursor to the given position. ||
|| `int` || `getch( int, int )` || ||
|| `int` || `addstrn( string, int )` || ||
|| `int` || `mvinch( int, int )` || ||
|| `int` || `insstrn( string, int )` || ||
|| `int` || `mvdelch( int, int )` || ||
|| `int` || `setscrreg( int, int )` || ||
|| `int` || `touchln( int, int )` || ||
|| `int` || `redrawln( int, int )` || ||
|| `int` || `mvinsstr( int,int,string )` || ||
|| `int` || `mvaddch( int,int,int )` || ||
|| `int` || `mvaddstr( int, int, string )` || ||
|| `int` || `mvinsch( int,int,int )` || ||
|| `int` || `mvaddstrn( int, int, string,int )` || ||
|| `int` || `mvaddstrn( int, int, string,int )` || ||
|| `int` || `mvinsstrn( int,int,string,int )` || ||
|| `int` || `mvcur( int,int,int,int )` || Low-level cursor movement. ||
|| `void` || `captureCout()` || Redirects the `std::cout` object to this window until the window is closed or `captureReset()` is called. ||
|| `void` || `captureCerr()` || Redirects the `std::cerr` object to this window until the window is closed or `captureReset()` is called. ||
|| `void` || `captureReset()` || Undoes stream capturing enabled with `captureCout()` and `captureCerr()`, revering `cout` and/or `cerr` to their previous state. ||
|| `int` || `getch()` || ||


TODOs:
  * organize these by category.
  * Implement the input-related functions (they require special handling due to (`char *`) usage).

=NCPanel Class=

NCPanel is analogous to the curses `PANEL` type. It is basically a top-level window widget
which can be stacked with other panels and moved around (both of which are problematic
with non-panel windows).

In addition to the NCWindow API, NCPanel has:

|| *Return type* || *Name/Arguments* || *Notes* ||
|| `NCPanel` || `new NCPanel()` || A top-level panel. ||
|| `NCPanel` || `new NCPanel(int lines, int cols [, int y=0, int x=0])` || Creates a new panel at the given position. A window can be wrapped around it with `new NCWindow(myPanel)`. ||
|| `void` || `hide()` || Hides the panel ||
|| `void` || `show()` || Shows the panel ||
|| `void` || `top()` || Moves the panel to the top of the stack. ||
|| `void` || `bottom()` || Moves the panel to the bottom of the stack. ||
|| `bool` || `hidden()` || Returns true if the panel is hidden. ||
|| `int` || `mvwin()` || Moves the panel ||

Some methods are overridden to accommodate for the slightly differing update/refresh
conventions between windows and panels.

=NCPad Class=

NCPad is another NCWindow subclass wrapping the very unusual ncurses
PAD type.  Pads are windows which may be larger than the
screen (normal curses windows cannot be out of the screen
bounds). They have some very intricate refreshing rules and are
difficult to use properly (at least in my experience). They are, however,
very useful in creating scrollable areas.

NCPad deserves much more documentation than is given here. Maybe someday. Until then...

|| *Return type* || *Name/Arguments* || *Notes* ||
|| `NCPad` || `new NCPad(NCWindow windowToWrap, int lines, int cols)` || Creates a new pad of the given size (which may be bigger than the screen). The given window is used as the drawing surface. ||

|| `int` ||`requestOp(int)` || Detailed in the native API. ||
|| `int` || `prefresh(six integers)` || Same as ncurses `prefresh()` ||
|| `int` || `pnoutrefresh(six integers)` || Same as ncurses `pnoutrefresh()` ||
|| `int` || `lineCount()` || Number of lines in the pad. ||
|| `int` || `columnCount()` || Number of columns in the pad. ||
|| `bool` || `consumeKey(int)` || See the native API ||
|| `void` || `mapKeyToReq(int key, int requestID)` || ||
|| `int` || `reqForKey(int key)` || ||
|| `int` || `echochar(int ch)` || ||
|| `void` || `inputLoop()` || Starts a local input loop. Pressing the arrow/page keys scrolls the pad and Ctrl-W or F10 stops the loop. ||
|| `int` || `refresh() || Reimplemented to take no args (as for NCWindow) or 6 args (equivalent to `prefresh()`) ||
|| `int` || `noutrefresh()` || Reimplemented to accept no args (as for NCWindow) or 6 args (equivalent to `pnoutrefresh()`) ||


=Examples=

It's hard to make short/concince examples for curses. i'll try to get
some written up at some point.


=Tips and Tricks=

General tips include:

  * Never use stdscr, a window the size of the screen, or overlapping windows at all. They're problematic to draw correctly. Use NCPanel objects to partition off your main working space, and use sub-windows within the panels to further organize.
  * NCPad is weird. Just plain weird. It takes lots of study to get it to do what you want it to.
  * The `NCWindow.captureCout()` and `captureCerr()` methods should always be matched with `captureReset()`, or else "good luck!"
