#summary JS bindings for ncurses
#labels Phase-UserDocs,Topic-Plugins

*ACHTUNG:* this plugin was broken as a side effect of recent v8-juice API changes, and is being completely rewritten.

=About=

The ncurses bindings wrap up a great deal of the ncurses API for use in JavaScript. Instead
of providing an API directly compatible with the low-level C API (as earlier versions)
of this plugin did), it provides an object-oriented interface. This is much easier to
manage, in terms of window ownership, subwindows, etc., than the low-level interface. Nonetheless,
it is still curses at heart, and "cant ake some getting used to."


The advantages of writing curses apps in JS instead of C include:

  *  MUCH faster development of curses UIs, as the whole compile/link cycle goes away.
  *  The event model of curses (keypress) ties in very well with JavaScript, where it is trivial to bind the keypresses to event handlers.

TODOs:
  *  lots more testing, in particular with the PANEL/PAD APIs.
  *  Utility routines/classes, e.g. dialog boxes, basic user input routines, scrollable areas, etc.

ncurses features i have no plans for implementing:
  *  The FORMS and MENU sub-libraries will not be implemented.
  *  Terminal resize handling. That's a can of worms i don't want to open.
  *  The wide-char ncurses API. Maybe someday, but not soon.

==History==

This plugin is derived from an old ncurses C++ wrapper which i forked out of the ncurses 5.4
source tree in March of 2005. At one point is was also the basis for !JavaScript/ncurses binding
for !SpiderMonkey.

The first version of this plugin modelled the C-style API. It got broken in some major refactoring
of v8-juice, and rather than fix it i decided an OO wrapper would be more useful, and revived
the ancient code.


=API Overview=

This plugin installs the following items:

  * The `ncurses` object holds all classes, "global" functions, and symbolic constants.
  * The `NCWindow` approximates an ncurses `WINDOW` handle.
  * The `NCPanel` approximates an ncurses `PANEL` handle.
  * The `NCPad` somewhat approximates an ncurses `PAD` handle.

=The `ncurses` Object=

This plugin installs an object called `ncurses` which holds all of the classes and
a few non-class functions:


|| *Return type* || *Name/Arguments* || *Notes* ||
|| `int` || `endwin()` || Never call unless absolutely necessary - forcibly exits curses mode without cleaning up resources. ||
|| `int` || `color_pair(string fg, string bg)` || Takes foreground/background color names (can insensitive) and return the equivalent curses color attributes. ||
|| `int` || `color_pairnum(string fg, string bg)` || Like `color_pair()`, but returns a curses color pair number, which is only very rarely useful or needed. ||
|| `int` || `KEY_F(int)` || Equivalent to the `KEY_F()` native macro. ||
|| `int` || `intVal( string )` || Returns the ascii integer value of the first character in the given string ||
|| `int` || `charVal(int)` || If the given int is in the inclusive range of 0-127, it returns the ASCII character (as a string), otherwise it returns undefined. ||
|| `int` || `screenHeight()` || Height of the terminal, in text rows. Not valid until in curses mode. ||
|| `int` || `screenWidth()` || Width of the terminal, in text columns. Not valid until in curses mode. ||
|| `int` || `beep()` || Beeps one time. ||
|| `int` || `flash()` || Flashes the terminal. ||
|| `int` || `getch()` || Similar, but not identical, to `NCWindow.getch()`. In theory they are indentical, but in practice the latter has no refresh side-effects, whereas the former sometimes does. ||
|| `int` || `curs_set(int)` || Sets the cursor to invisible, half-visible, or fully visible, depending on whether the argument is 0, 1, or 2, respectively ||
|| `int` || `napms(int )` || Sleeps for the given number of milliseconds. ||


=NCWindow Class=

NCWindow is the base class of most other classes in this package. It is a wrapper around
an ncurses `WINDOW` handle, and provides most functions necessary for working with curses
windows.

==Member Function List==

These functions are listed, but not documented, here. Most of these
functions map 1-to-1 with ncurses functions of the same name, and are
described in great detail in the ncurses man pages. That also explains
why their names are so cryptic and do not follow common JavaScript
naming conventions. The exceptions to the documentation rule are
functions which are unique to this API or, for reasons of argument
passing conventions, function differently than in the C API.

Here we go...

|| *Return type* || *Name/Arguments* || *Notes* ||
|| `NCWindow` || `new NCWindow()` || A proxy for the ncurses `stdscr` object. ||
|| `NCWindow` || `new NCWindow(NCWindow [, bool box=true])` || Creates a subwindow of the given window, completely wrapping it with a 1-line/col border. If box is true, the border is decorated. Throws on error. ||
|| `NCWindow` || `new NCWindow(int lines, int cols, int y, int x)` || Creates a new wind with the given size/position. Throws on error. ||
|| `NCWindow` || `new NCWindow(NCWindow parent, int lines, int cols, int y, int x)` || Creates a subwindow of the given window, with coordinates relative to that window. ||
|| `string` ||  `name()` || ||
|| `int` ||  `lines()` || ||
|| `int` ||  `cols()` || ||
|| `int` ||  `tabsize()` || ||
|| `int` ||  `height()` || ||
|| `int` ||  `width()` || ||
|| `int` ||  `begy()` || ||
|| `int` ||  `begx()` || ||
|| `int` ||  `maxx()` || ||
|| `int` ||  `maxy()` || ||
|| `int` ||  `inch()` || ||
|| `int` ||  `insertln()` || ||
|| `int` ||  `getbkgd()` || ||
|| `int` ||  `erase()` || ||
|| `int` ||  `clear()` || ||
|| `int` ||  `clrtobot()` || ||
|| `int` ||  `delch()` || ||
|| `int` ||  `deleteln()` || ||
|| `int` ||  `touchwin()` || ||
|| `int` ||  `untouchwin()` || ||
|| `bool` ||  `is_wintouched()` || ||
|| `int` ||  `redrawwin()` || ||
|| `int` ||  `doupdate()` || ||
|| `void` ||  `syncdown()` || ||
|| `void` ||  `syncup()` || ||
|| `void` ||  `cursyncup()` || ||
|| `int` ||  `standout()` || ||
|| `int` ||  `standend()` || ||
|| `int` ||  `refresh()` || ||
|| `int` ||  `noutrefresh()` || ||
|| `bool` ||  `has_mouse()` || ||
|| `void` || `setName(string)` || ||
|| `int` || `insch(int)` || ||
|| `int` || `insdelln(int)` || ||
|| `int` || `insstr(string)` || ||
|| `int` || `attron(int)` || ||
|| `int` || `attroff(int)` || ||
|| `int` || `attrset(int)` || ||
|| `int` || `color_set(int)` || Don't use this. Use `ncurses.color_pair()` instead - much easier. ||
|| `int` || `bkgd(int)` || ||
|| `int` || `clearok(bool)` || ||
|| `int` || `scroll(int)` || ||
|| `int` || `scrollok(bool)` || ||
|| `int` || `idlok(bool)` || ||
|| `void` || `idcok(bool)` || ||
|| `int` || `leaveok(bool)` || ||
|| `void` || `immedok(bool)` || ||
|| `int` || `keypad(bool)` || ||
|| `int` || `addch(int)` || ||
|| `int` || `echochar(int)` || ||
|| `int` || `addstr(string)` || ||
|| `bool` || `is_linetouched(int)` || ||
|| `int` || `mvwin( int, int )` || Moves the window. Do not do this if the window has a parent, or Grief may ensue. ||
|| `int` || `move( int, int )` || Moves the cursor to the given position. ||
|| `int` || `getch( int, int )` || ||
|| `int` || `addstrn( string, int )` || ||
|| `int` || `mvinch( int, int )` || ||
|| `int` || `insstrn( string, int )` || ||
|| `int` || `mvdelch( int, int )` || ||
|| `int` || `setscrreg( int, int )` || ||
|| `int` || `touchln( int, int )` || ||
|| `int` || `redrawln( int, int )` || ||
|| `int` || `mvinsstr( int,int,string )` || ||
|| `int` || `mvaddch( int,int,int )` || ||
|| `int` || `mvaddstr( int, int, string )` || ||
|| `int` || `mvinsch( int,int,int )` || ||
|| `int` || `mvaddstrn( int, int, string,int )` || ||
|| `int` || `mvaddstrn( int, int, string,int )` || ||
|| `int` || `mvinsstrn( int,int,string,int )` || ||
|| `int` || `mvcur( int,int,int,int )` || ||
|| `void` || `captureCout()` || Redirects the `std::cout` object to this window until the window is closed or `captureReset()` is called. ||
|| `void` || `captureCerr()` || Redirects the `std::cerr` object to this window until the window is closed or `captureReset()` is called. ||
|| `void` || `captureReset()` || Undoes stream capturing enabled with `captureCout()` and `captureCerr()`, revering `cout` and/or `cerr` to their previous state. ||
|| `void` || `close()` || Closes/destroys this windows. The object cannot be used after this is called. || 
|| `int` || `getch()` || ||


TODOs:
  * organize these by category.
  * Implement the input-related functions (they require special handling due to (`char *`) usage).

=NCPanel Class=

TODO: document


=NCPad Class=

TODO: document


=Tips and Tricks=

General tips include:

  * Never use stdscr, a window the size of the screen, or overlapping windows at all. They're problematic to draw correctly. Use NCPanel objects to partition off your main working space, and use sub-windows within the panels to further organize.
  * NCPad is weird. Just plain weird. It takes lots of study to get it to do what you want it to.
  * The `NCWindow.captureCout()` and `captureCerr()` methods should always be matched with `captureReset()`, or else "good luck!"
