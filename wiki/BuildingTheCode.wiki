#summary Configuring and building the source tree
#labels Phase-UserDocs,Phase-Implementation,Featured

=Requirements and prerequisites=

Caveat #1: the current build tree will ONLY work on GNU platforms, or Unix-like platforms which host GNU toolsets (including GNU-compatible versions of the basic system tools, gcc, and GNU Make 3.81). It won't compile as-is (or will compile but not link) on Cygwin or Mac platforms (i only have Linux boxes, so that's what my build tools target). i would really like to port (or get someone else to port) the tree to scons at some point (for platform compatibility), but i have no experience with scons. Once the tree is restructured how i want it, i'll revisit scons (which can live in parallel with my own personal favourite, Make).

The sources have only two hard dependencies: [http://code.google.com/p/v8/ Google v8] and the STL (which comes with all sane C++ compilers and is also available separately via projects like [http://stlport.sourceforge.net STLPort]). For plugins to work it needs (on Unix platforms) libdl or libltdl. (For Windows platforms the DLL support needs no additional libraries.)

=Configuring and compiling=

The build is fairly conventional:

{{{
./configure ... options (see below) ...
make
make install # installs under the path defined by --prefix=/path
}}}

My default build options is `make -j2` for parallel building, so the tree is believed to build okay with parallel builds (if it doesn't, please file a bug report). That said, certain parts of the tree enforce that certain directory branches are built before others, so certain branches may not allow parallelization.

The following configuration options are often helpful or necessary:

  * `--prefix=/dir` is the installation prefix and the default place under which it will look for v8 and any additional libraries (e.g. those needed by plugins). Using `--prefix=$HOME` is often a good choice, and it allows a non-root user to run the installation.
  * `--v8-home=/top/install/dir/of/v8` tells configure to look for v8 under the given dir. It expects to find `include/v8.h` and `lib/libv8(_g).(a|so)`.
  * `--enable-debug` turns on debugging options and tries to link against `libv8_g` instead of `libv8` (but will use the latter if it can't find the former).
  * `--help` shows many more options which you'll never need.
  * `--disable-plugins` is silly, but go ahead if you want to disable the build of the plugins. Plugins are automatically disabled if neither `-ldl` or `-lltdl` are found. Specific plugins might not get compiled because their plugin-specific prerequisites are not met (e.g. libsqlite3 or libncurses).

See SourceTreeOverview for info on how the tree is laid out.

=Installation=

Run `make install` to install the library under the directory specified by the `--prefix=/path` configure argument.

If you need to do a custom installation, here's what you'll need to copy (and to where):

  * `src/lib/juice/libv8-juice.*` should go somewhere in your linker path.
  * `src/include/v8` should be copied (recursively) to some top-level includes dir of your choice.
  * `src/client/shell/v8-juice-shell` can optionally be installed somewhere in your PATH.
  * `src/lib/plugins/.../*.so` should be put in the directory `PREFIX/lib/v8/juice` (that's the compile-time default search path), or change the library search path in your application by using v8::juice::plugin::PluginsPath(). See [Plugins] for more information about that.

The makefile also supports `make uninstall`.